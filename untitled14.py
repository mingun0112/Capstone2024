# -*- coding: utf-8 -*-
"""Untitled14.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AV5gge-FRTjgWwoR5DxEbavhYOovVh5u
"""

##표준화


# 주어진 데이터
data = """
Range A: 1.04
Range B: 2.52
Range C: 3.18

Range A: 1.45
Range B: 2.25
Range C: 0.00

Range A: 1.11
Range B: 2.28
Range C: 0.00

Range A: 1.05
Range B: 2.29
Range C: 3.43

Range A: 1.04
Range B: 2.33
Range C: 3.18

Range A: 1.04
Range B: 2.32
Range C: 3.20

Range A: 0.00
Range B: 2.25
Range C: 3.34

Range A: 1.03
Range B: 2.27
Range C: 3.34

Range A: 0.97
Range B: 2.38
Range C: 3.26

Range A: 1.06
Range B: 2.27
Range C: 3.26

Range A: 1.15
Range B: 2.31
Range C: 3.19

Range A: 1.10
Range B: 0.00
Range C: 3.19

Range A: 1.04
Range B: 2.32
Range C: 3.17

Range A: 1.02
Range B: 0.00
Range C: 3.17

Range A: 0.99
Range B: 2.24
Range C: 3.38

Range A: 1.05
Range B: 2.31
Range C: 3.38

Range A: 1.03
Range B: 2.29
Range C: 3.38

Range A: 1.10
Range B: 2.33
Range C: 3.20

Range A: 1.07
Range B: 2.33
Range C: 3.20

Range A: 1.11
Range B: 2.25
Range C: 3.20

Range A: 1.12
Range B: 2.22
Range C: 3.15

Range A: 1.03
Range B: 2.23
Range C: 3.15

Range A: 1.04
Range B: 2.27
Range C: 3.23

Range A: 1.04
Range B: 2.57
Range C: 3.23

Range A: 1.06
Range B: 2.30
Range C: 3.48

Range A: 1.05
Range B: 2.30
Range C: 3.25

Range A: 1.06
Range B: 2.28
Range C: 3.17

Range A: 1.05
Range B: 2.23
Range C: 3.19

Range A: 0.00
Range B: 2.23
Range C: 3.21

Range A: 1.10
Range B: 2.30
Range C: 3.40

Range A: 1.07
Range B: 2.49
Range C: 3.40

Range A: 1.06
Range B: 2.52
Range C: 3.22

Range A: 1.03
Range B: 2.52
Range C: 3.22

Range A: 1.03
Range B: 2.35
Range C: 3.22

Range A: 1.04
Range B: 2.23
Range C: 3.22

Range A: 1.04
Range B: 2.38
Range C: 3.22

Range A: 1.03
Range B: 2.22
Range C: 3.16

Range A: 1.03
Range B: 2.26
Range C: 3.16

Range A: 1.03
Range B: 2.21
Range C: 3.18

Range A: 1.44
Range B: 2.51
Range C: 3.18

Range A: 1.44
Range B: 2.24
Range C: 3.16

Range A: 1.44
Range B: 2.31
Range C: 3.16

Range A: 1.05
Range B: 2.24
Range C: 3.16

Range A: 1.22
Range B: 2.24
Range C: 3.44

Range A: 1.03
Range B: 2.23
Range C: 3.17
"""

# 데이터 파싱
range_a = []
range_b = []
range_c = []

# 데이터를 줄 단위로 나누고 파싱
for line in data.strip().split('\n'):
    if "Range A:" in line:
        value = float(line.split(":")[1].strip())
        if value != 0.00:  # 0.00 제외
            range_a.append(value)
    elif "Range B:" in line:
        value = float(line.split(":")[1].strip())
        if value != 0.00:  # 0.00 제외
            range_b.append(value)
    elif "Range C:" in line:
        value = float(line.split(":")[1].strip())
        if value != 0.00:  # 0.00 제외
            range_c.append(value)

# 표준화 함수
def standardize(data):
    mean = sum(data) / len(data)
    variance = sum((x - mean) ** 2 for x in data) / (len(data)-1)
    stddev = variance ** 0.5
    return [(x - mean) / stddev for x in data]

# 표준화 적용
standardized_a = standardize(range_a)
standardized_b = standardize(range_b)
standardized_c = standardize(range_c)

# 0에 가장 가까운 값 찾기
def find_closest_to_zero(standardized_data, original_data):
    closest_value = min(standardized_data, key=abs)  # 표준화된 값 중 0에 가장 가까운 값
    index = standardized_data.index(closest_value)  # 해당 값의 인덱스
    original_value = original_data[index]  # 원래 값 추출
    return closest_value, original_value

# 각 Range에서 0에 가장 가까운 값 찾기
closest_a = find_closest_to_zero(standardized_a, range_a)
closest_b = find_closest_to_zero(standardized_b, range_b)
closest_c = find_closest_to_zero(standardized_c, range_c)

# 결과 출력
print("Range A - Closest to 0 (Standardized):", closest_a[0], "Original Value:", closest_a[1])
print("Range B - Closest to 0 (Standardized):", closest_b[0], "Original Value:", closest_b[1])
print("Range C - Closest to 0 (Standardized):", closest_c[0], "Original Value:", closest_c[1])

# Min-Max 정규화 함수
def min_max_normalize(data):
    min_value = min(data)  # 데이터의 최솟값
    max_value = max(data)  # 데이터의 최댓값

    # Min-Max 정규화
    return [(x - min_value) / (max_value - min_value) for x in data]

# 주어진 데이터
data = """
Range A: 1.04
Range B: 2.52
Range C: 3.18

Range A: 1.45
Range B: 2.25
Range C: 0.00

Range A: 1.11
Range B: 2.28
Range C: 0.00

Range A: 1.05
Range B: 2.29
Range C: 3.43

Range A: 1.04
Range B: 2.33
Range C: 3.18

Range A: 1.04
Range B: 2.32
Range C: 3.20

Range A: 0.00
Range B: 2.25
Range C: 3.34

Range A: 1.03
Range B: 2.27
Range C: 3.34

Range A: 0.97
Range B: 2.38
Range C: 3.26

Range A: 1.06
Range B: 2.27
Range C: 3.26

Range A: 1.15
Range B: 2.31
Range C: 3.19

Range A: 1.10
Range B: 0.00
Range C: 3.19

Range A: 1.04
Range B: 2.32
Range C: 3.17

Range A: 1.02
Range B: 0.00
Range C: 3.17

Range A: 0.99
Range B: 2.24
Range C: 3.38

Range A: 1.05
Range B: 2.31
Range C: 3.38

Range A: 1.03
Range B: 2.29
Range C: 3.38

Range A: 1.10
Range B: 2.33
Range C: 3.20

Range A: 1.07
Range B: 2.33
Range C: 3.20

Range A: 1.11
Range B: 2.25
Range C: 3.20

Range A: 1.12
Range B: 2.22
Range C: 3.15

Range A: 1.03
Range B: 2.23
Range C: 3.15

Range A: 1.04
Range B: 2.27
Range C: 3.23

Range A: 1.04
Range B: 2.57
Range C: 3.23

Range A: 1.06
Range B: 2.30
Range C: 3.48

Range A: 1.05
Range B: 2.30
Range C: 3.25

Range A: 1.06
Range B: 2.28
Range C: 3.17

Range A: 1.05
Range B: 2.23
Range C: 3.19

Range A: 0.00
Range B: 2.23
Range C: 3.21

Range A: 1.10
Range B: 2.30
Range C: 3.40

Range A: 1.07
Range B: 2.49
Range C: 3.40

Range A: 1.06
Range B: 2.52
Range C: 3.22

Range A: 1.03
Range B: 2.52
Range C: 3.22

Range A: 1.03
Range B: 2.35
Range C: 3.22

Range A: 1.04
Range B: 2.23
Range C: 3.22

Range A: 1.04
Range B: 2.38
Range C: 3.22

Range A: 1.03
Range B: 2.22
Range C: 3.16

Range A: 1.03
Range B: 2.26
Range C: 3.16

Range A: 1.03
Range B: 2.21
Range C: 3.18

Range A: 1.44
Range B: 2.51
Range C: 3.18

Range A: 1.44
Range B: 2.24
Range C: 3.16

Range A: 1.44
Range B: 2.31
Range C: 3.16

Range A: 1.05
Range B: 2.24
Range C: 3.16

Range A: 1.22
Range B: 2.24
Range C: 3.44

Range A: 1.03
Range B: 2.23
Range C: 3.17
"""

# 데이터 파싱
range_a = []
range_b = []
range_c = []

# 데이터를 줄 단위로 나누고 파싱
for line in data.strip().split('\n'):
    if "Range A:" in line:
        value = float(line.split(":")[1].strip())
        if value != 0.00:  # 0.00 제외
            range_a.append(value)
    elif "Range B:" in line:
        value = float(line.split(":")[1].strip())
        if value != 0.00:  # 0.00 제외
            range_b.append(value)
    elif "Range C:" in line:
        value = float(line.split(":")[1].strip())
        if value != 0.00:  # 0.00 제외
            range_c.append(value)

# Min-Max 정규화 적용
normalized_a = min_max_normalize(range_a)
normalized_b = min_max_normalize(range_b)
normalized_c = min_max_normalize(range_c)

# 가장 쓸만한 데이터 찾기 (정규화된 값이 1에 가장 가까운 값)
def find_most_valuable(normalized_data, original_data):
    closest_value = max(normalized_data)  # 정규화된 값 중 최대값 (1에 가까운 값)
    index = normalized_data.index(closest_value)  # 해당 값의 인덱스
    original_value = original_data[index]  # 원래 값 추출
    return closest_value, original_value

# 각 Range에서 가장 쓸만한 데이터 찾기
most_valuable_a = find_most_valuable(normalized_a, range_a)
most_valuable_b = find_most_valuable(normalized_b, range_b)
most_valuable_c = find_most_valuable(normalized_c, range_c)

# 결과 출력
print("Range A - Most Valuable (Normalized):", most_valuable_a[0], "Original Value:", most_valuable_a[1])
print("Range B - Most Valuable (Normalized):", most_valuable_b[0], "Original Value:", most_valuable_b[1])
print("Range C - Most Valuable (Normalized):", most_valuable_c[0], "Original Value:", most_valuable_c[1])

# 중앙값 계산 함수
def median(data):
    sorted_data = sorted(data)  # 데이터를 정렬
    n = len(sorted_data)
    mid = n // 2  # 중앙 인덱스

    if n % 2 == 0:  # 짝수 개수
        return (sorted_data[mid - 1] + sorted_data[mid]) / 2
    else:  # 홀수 개수
        return sorted_data[mid]

# 주어진 데이터
data = """
Range A: 1.04
Range B: 2.52
Range C: 3.18

Range A: 1.45
Range B: 2.25
Range C: 0.00

Range A: 1.11
Range B: 2.28
Range C: 0.00

Range A: 1.05
Range B: 2.29
Range C: 3.43

Range A: 1.04
Range B: 2.33
Range C: 3.18

Range A: 1.04
Range B: 2.32
Range C: 3.20

Range A: 0.00
Range B: 2.25
Range C: 3.34

Range A: 1.03
Range B: 2.27
Range C: 3.34

Range A: 0.97
Range B: 2.38
Range C: 3.26

Range A: 1.06
Range B: 2.27
Range C: 3.26

Range A: 1.15
Range B: 2.31
Range C: 3.19

Range A: 1.10
Range B: 0.00
Range C: 3.19

Range A: 1.04
Range B: 2.32
Range C: 3.17

Range A: 1.02
Range B: 0.00
Range C: 3.17

Range A: 0.99
Range B: 2.24
Range C: 3.38

Range A: 1.05
Range B: 2.31
Range C: 3.38

Range A: 1.03
Range B: 2.29
Range C: 3.38

Range A: 1.10
Range B: 2.33
Range C: 3.20

Range A: 1.07
Range B: 2.33
Range C: 3.20

Range A: 1.11
Range B: 2.25
Range C: 3.20

Range A: 1.12
Range B: 2.22
Range C: 3.15

Range A: 1.03
Range B: 2.23
Range C: 3.15

Range A: 1.04
Range B: 2.27
Range C: 3.23

Range A: 1.04
Range B: 2.57
Range C: 3.23

Range A: 1.06
Range B: 2.30
Range C: 3.48

Range A: 1.05
Range B: 2.30
Range C: 3.25

Range A: 1.06
Range B: 2.28
Range C: 3.17

Range A: 1.05
Range B: 2.23
Range C: 3.19

Range A: 0.00
Range B: 2.23
Range C: 3.21

Range A: 1.10
Range B: 2.30
Range C: 3.40

Range A: 1.07
Range B: 2.49
Range C: 3.40

Range A: 1.06
Range B: 2.52
Range C: 3.22

Range A: 1.03
Range B: 2.52
Range C: 3.22

Range A: 1.03
Range B: 2.35
Range C: 3.22

Range A: 1.04
Range B: 2.23
Range C: 3.22

Range A: 1.04
Range B: 2.38
Range C: 3.22

Range A: 1.03
Range B: 2.22
Range C: 3.16

Range A: 1.03
Range B: 2.26
Range C: 3.16

Range A: 1.03
Range B: 2.21
Range C: 3.18

Range A: 1.44
Range B: 2.51
Range C: 3.18

Range A: 1.44
Range B: 2.24
Range C: 3.16

Range A: 1.44
Range B: 2.31
Range C: 3.16

Range A: 1.05
Range B: 2.24
Range C: 3.16

Range A: 1.22
Range B: 2.24
Range C: 3.44

Range A: 1.03
Range B: 2.23
Range C: 3.17
"""

# 데이터 파싱
range_a = []
range_b = []
range_c = []

# 데이터를 줄 단위로 나누고 파싱
for line in data.strip().split('\n'):
    if "Range A:" in line:
        value = float(line.split(":")[1].strip())
        if value != 0.00:  # 0.00 제외
            range_a.append(value)
    elif "Range B:" in line:
        value = float(line.split(":")[1].strip())
        if value != 0.00:  # 0.00 제외
            range_b.append(value)
    elif "Range C:" in line:
        value = float(line.split(":")[1].strip())
        if value != 0.00:  # 0.00 제외
            range_c.append(value)

# 중앙값 계산
median_a = median(range_a)
median_b = median(range_b)
median_c = median(range_c)

# 결과 출력
print("Range A - Median:", median_a)
print("Range B - Median:", median_b)
print("Range C - Median:", median_c)

##신뢰구간 95% 적용하여 최적의 데이터 계산

import numpy as np
import scipy.stats as stats

# 주어진 데이터
data = """
Range A: 1.04
Range B: 2.52
Range C: 3.18

Range A: 1.45
Range B: 2.25
Range C: 0.00

Range A: 1.11
Range B: 2.28
Range C: 0.00

Range A: 1.05
Range B: 2.29
Range C: 3.43

Range A: 1.04
Range B: 2.33
Range C: 3.18

Range A: 1.04
Range B: 2.32
Range C: 3.20

Range A: 0.00
Range B: 2.25
Range C: 3.34

Range A: 1.03
Range B: 2.27
Range C: 3.34

Range A: 0.97
Range B: 2.38
Range C: 3.26

Range A: 1.06
Range B: 2.27
Range C: 3.26

Range A: 1.15
Range B: 2.31
Range C: 3.19

Range A: 1.10
Range B: 0.00
Range C: 3.19

Range A: 1.04
Range B: 2.32
Range C: 3.17

Range A: 1.02
Range B: 0.00
Range C: 3.17

Range A: 0.99
Range B: 2.24
Range C: 3.38

Range A: 1.05
Range B: 2.31
Range C: 3.38

Range A: 1.03
Range B: 2.29
Range C: 3.38

Range A: 1.10
Range B: 2.33
Range C: 3.20

Range A: 1.07
Range B: 2.33
Range C: 3.20

Range A: 1.11
Range B: 2.25
Range C: 3.20

Range A: 1.12
Range B: 2.22
Range C: 3.15

Range A: 1.03
Range B: 2.23
Range C: 3.15

Range A: 1.04
Range B: 2.27
Range C: 3.23

Range A: 1.04
Range B: 2.57
Range C: 3.23

Range A: 1.06
Range B: 2.30
Range C: 3.48

Range A: 1.05
Range B: 2.30
Range C: 3.25

Range A: 1.06
Range B: 2.28
Range C: 3.17

Range A: 1.05
Range B: 2.23
Range C: 3.19

Range A: 0.00
Range B: 2.23
Range C: 3.21

Range A: 1.10
Range B: 2.30
Range C: 3.40

Range A: 1.07
Range B: 2.49
Range C: 3.40

Range A: 1.06
Range B: 2.52
Range C: 3.22

Range A: 1.03
Range B: 2.52
Range C: 3.22

Range A: 1.03
Range B: 2.35
Range C: 3.22

Range A: 1.04
Range B: 2.23
Range C: 3.22

Range A: 1.04
Range B: 2.38
Range C: 3.22

Range A: 1.03
Range B: 2.22
Range C: 3.16

Range A: 1.03
Range B: 2.26
Range C: 3.16

Range A: 1.03
Range B: 2.21
Range C: 3.18

Range A: 1.44
Range B: 2.51
Range C: 3.18

Range A: 1.44
Range B: 2.24
Range C: 3.16

Range A: 1.44
Range B: 2.31
Range C: 3.16

Range A: 1.05
Range B: 2.24
Range C: 3.16

Range A: 1.22
Range B: 2.24
Range C: 3.44

Range A: 1.03
Range B: 2.23
Range C: 3.17
"""

# 데이터 파싱
range_a = []
range_b = []
range_c = []

# 데이터를 줄 단위로 나누고 파싱
for line in data.strip().split('\n'):
    if "Range A:" in line:
        value = float(line.split(":")[1].strip())
        if value != 0.00:  # 0.00 제외
            range_a.append(value)
    elif "Range B:" in line:
        value = float(line.split(":")[1].strip())
        if value != 0.00:  # 0.00 제외
            range_b.append(value)
    elif "Range C:" in line:
        value = float(line.split(":")[1].strip())
        if value != 0.00:  # 0.00 제외
            range_c.append(value)

# 신뢰 구간 계산 함수
def confidence_interval(data, confidence=0.95):
    n = len(data)
    mean = np.mean(data)
    std_err = stats.sem(data)  # 표준 오차
    h = std_err * stats.t.ppf((1 + confidence) / 2., n-1)  # 신뢰 구간의 반길이
    return mean - h, mean + h  # 신뢰 구간의 하한과 상한

# 각 Range에 대한 신뢰 구간 계산
ci_a = confidence_interval(range_a)
ci_b = confidence_interval(range_b)
ci_c = confidence_interval(range_c)

# 신뢰 구간의 중앙값 계산
def get_best_value(ci):
    return (ci[0] + ci[1]) / 2  # 하한과 상한의 평균

# 각 Range에 대한 "가장 좋은 값"과 원래 값 찾기
best_value_a = get_best_value(ci_a)
best_value_b = get_best_value(ci_b)
best_value_c = get_best_value(ci_c)

# 원래 값 찾기 (평균값에 가장 가까운 값)
def find_original_value(data, best_value):
    return min(data, key=lambda x: abs(x - best_value))  # 평균값과 가장 가까운 원래 값

original_value_a = find_original_value(range_a, best_value_a)
original_value_b = find_original_value(range_b, best_value_b)
original_value_c = find_original_value(range_c, best_value_c)

# 결과 출력
print("Range A - Best Value (Confidence Interval Median):", best_value_a, "Original Value:", original_value_a)
print("Range B - Best Value (Confidence Interval Median):", best_value_b, "Original Value:", original_value_b)
print("Range C - Best Value (Confidence Interval Median):", best_value_c, "Original Value:", original_value_c)